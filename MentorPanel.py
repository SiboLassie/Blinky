#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.21
#  in conjunction with Tcl version 8.6
#    Mar 13, 2019 10:02:21 PM +0200  platform: Windows NT
import pyodbc
import sys

import Pmw

import BlinkyDataBaseManagment
import Forgot_password
import Infohelp
import sendMsgs
import support

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True
import LogicGui
from functools import partial
from tkinter import filedialog

import BlinkyDataBaseManagment
import sendMsgs
global tempdir

tempdir = ""
tempdirList = {}

def browse(entry):
    tempdir = filedialog.askopenfilename()
    entry.insert(0,tempdir)
    tempdirList["tempdir"] = tempdir

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

w = None
def create_MentorPanel(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    set_Tk_var()
    top = MentorPanel(w)
    init(w, top, *args, **kwargs)
    return (w, top)

def destroy_MentorPanel():
    global w
    w.destroy()
    w = None

global MentorList
MentorList = {}

def callback(obj):
    uid = MentorList["UserComboBox"].get()
    BlinkyDataBaseManagment.allImages(uid,MentorList)
    BlinkyDataBaseManagment.allPhrases(uid,MentorList)


def set_Tk_var():
    global combobox
    combobox = tk.StringVar()

class MentorPanel:
    def create_MentorPanelWin(self,MentorID, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1264x869+319+58")
        top.title("New Toplevel")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.MentorCntPnl = tk.Frame(top)
        self.MentorCntPnl.place(relx=0.182, rely=0.035, relheight=0.921
                , relwidth=0.633)
        self.MentorCntPnl.configure(relief='groove')
        self.MentorCntPnl.configure(borderwidth="2")
        self.MentorCntPnl.configure(relief='groove')
        self.MentorCntPnl.configure(background="#d9d9d9")
        self.MentorCntPnl.configure(highlightbackground="#d9d9d9")
        self.MentorCntPnl.configure(highlightcolor="black")
        self.MentorCntPnl.configure(width=125)

        self.MentorLabel = tk.Label(self.MentorCntPnl)
        self.MentorLabel.place(relx=0.3, rely=0.013, height=71, width=297)
        self.MentorLabel.configure(activebackground="#f9f9f9")
        self.MentorLabel.configure(activeforeground="black")
        self.MentorLabel.configure(background="#d9d9d9")
        self.MentorLabel.configure(disabledforeground="#a3a3a3")
        self.MentorLabel.configure(font="-family {Segoe UI} -size 12")
        self.MentorLabel.configure(foreground="#000000")
        self.MentorLabel.configure(highlightbackground="#d9d9d9")
        self.MentorLabel.configure(highlightcolor="black")
        self.MentorLabel.configure(text='''Mentor Control Panel''')

        self.ChooseUserLabel = tk.Label(self.MentorCntPnl)
        self.ChooseUserLabel.place(relx=0.025, rely=0.088, height=31, width=106)
        self.ChooseUserLabel.configure(activebackground="#f9f9f9")
        self.ChooseUserLabel.configure(activeforeground="black")
        self.ChooseUserLabel.configure(background="#d9d9d9")
        self.ChooseUserLabel.configure(disabledforeground="#a3a3a3")
        self.ChooseUserLabel.configure(foreground="#000000")
        self.ChooseUserLabel.configure(highlightbackground="#d9d9d9")
        self.ChooseUserLabel.configure(highlightcolor="black")
        self.ChooseUserLabel.configure(text='''Choose User:''')

        self.box_value = tk.StringVar()
        self.UserComboBox = ttk.Combobox(self.MentorCntPnl, textvariable=self.box_value)
        self.UserComboBox.place(relx=0.15, rely=0.088, relheight=0.039
                , relwidth=0.29)
        self.UserComboBox.configure(textvariable=set_Tk_var)
        self.UserComboBox.configure(takefocus="")
        self.UserComboBox['values'] = BlinkyDataBaseManagment.loadAllUsers(MentorID)

        self.UserComboBox.bind("<<ComboboxSelected>>",callback,MentorList)

        self.ChooseImgLabel = tk.Label(self.MentorCntPnl)
        self.ChooseImgLabel.place(relx=0.475, rely=0.15, height=31, width=127)
        self.ChooseImgLabel.configure(activebackground="#f9f9f9")
        self.ChooseImgLabel.configure(activeforeground="black")
        self.ChooseImgLabel.configure(background="#d9d9d9")
        self.ChooseImgLabel.configure(disabledforeground="#a3a3a3")
        self.ChooseImgLabel.configure(foreground="#000000")
        self.ChooseImgLabel.configure(highlightbackground="#d9d9d9")
        self.ChooseImgLabel.configure(highlightcolor="black")
        self.ChooseImgLabel.configure(text='''Choose Image:''')

        self.box_value = tk.StringVar()
        self.ImageComboBox = ttk.Combobox(self.MentorCntPnl,textvariable=self.box_value)
        self.ImageComboBox.place(relx=0.625, rely=0.15, relheight=0.039
                , relwidth=0.29)
        self.ImageComboBox.configure(textvariable=set_Tk_var)
        self.ImageComboBox.configure(takefocus="")
        self.ImageComboBox['values'] =("")

        self.Label5 = tk.Label(self.MentorCntPnl)
        self.Label5.place(relx=0.025, rely=0.213, height=31, width=103)
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(activeforeground="black")
        self.Label5.configure(background="#d9d9d9")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(font="-family {Segoe UI} -size 9")
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(highlightbackground="#d9d9d9")
        self.Label5.configure(highlightcolor="black")
        self.Label5.configure(text='''Choose Title:''')

        self.titleCombobox = ttk.Combobox(self.MentorCntPnl)
        self.titleCombobox.place(relx=0.175, rely=0.213, relheight=0.033
                , relwidth=0.271)
        self.titleCombobox.configure(textvariable=set_Tk_var)
        self.titleCombobox.configure(width=217)
        self.titleCombobox.configure(takefocus="")

        self.SendMsgLabel = tk.Label(self.MentorCntPnl)
        self.SendMsgLabel.place(relx=0.05, rely=0.638, height=61, width=207)
        self.SendMsgLabel.configure(activebackground="#f9f9f9")
        self.SendMsgLabel.configure(activeforeground="black")
        self.SendMsgLabel.configure(background="#d9d9d9")
        self.SendMsgLabel.configure(disabledforeground="#a3a3a3")
        self.SendMsgLabel.configure(foreground="#000000")
        self.SendMsgLabel.configure(highlightbackground="#d9d9d9")
        self.SendMsgLabel.configure(highlightcolor="black")
        self.SendMsgLabel.configure(text='''Send Message to Users:''')

        self.EntryMessageUser = tk.Entry(self.MentorCntPnl)
        self.EntryMessageUser.place(relx=0.338, rely=0.675, height=66
                , relwidth=0.343)
        self.EntryMessageUser.configure(background="white")
        self.EntryMessageUser.configure(disabledforeground="#a3a3a3")
        self.EntryMessageUser.configure(font="TkFixedFont")
        self.EntryMessageUser.configure(foreground="#000000")
        self.EntryMessageUser.configure(highlightbackground="#d9d9d9")
        self.EntryMessageUser.configure(highlightcolor="black")
        self.EntryMessageUser.configure(insertbackground="black")
        self.EntryMessageUser.configure(selectbackground="#c4c4c4")
        self.EntryMessageUser.configure(selectforeground="black")
        self.EntryMessageUser.configure(width=274)

        action_with_args = partial(sendMsgs.sendMsgtoUserFromMentor, MentorID, MentorList)

        self.Sendmsgbutton = tk.Button(self.MentorCntPnl,command = action_with_args)
        self.Sendmsgbutton.place(relx=0.738, rely=0.663, height=42, width=118)
        self.Sendmsgbutton.configure(activebackground="#ececec")
        self.Sendmsgbutton.configure(activeforeground="#000000")
        self.Sendmsgbutton.configure(background="#d9d9d9")
        self.Sendmsgbutton.configure(disabledforeground="#a3a3a3")
        self.Sendmsgbutton.configure(foreground="#000000")
        self.Sendmsgbutton.configure(highlightbackground="#d9d9d9")
        self.Sendmsgbutton.configure(highlightcolor="black")
        self.Sendmsgbutton.configure(pady="0")
        self.Sendmsgbutton.configure(text='''Send''')

        self.InfoLabel = tk.Label(self.MentorCntPnl)
        self.InfoLabel.place(relx=0.044, rely=0.7, height=71, width=127)
        self.InfoLabel.configure(activebackground="#f9f9f9")
        self.InfoLabel.configure(activeforeground="black")
        self.InfoLabel.configure(background="#d9d9d9")
        self.InfoLabel.configure(disabledforeground="#a3a3a3")
        self.InfoLabel.configure(foreground="#000000")
        self.InfoLabel.configure(highlightbackground="#d9d9d9")
        self.InfoLabel.configure(highlightcolor="black")
        self.InfoLabel.configure(text='''Information:''')

        self.ChooseUserLabel1 = tk.Label(self.MentorCntPnl)
        self.ChooseUserLabel1.place(relx=0.05, rely=0.788, height=31, width=127)
        self.ChooseUserLabel1.configure(activebackground="#f9f9f9")
        self.ChooseUserLabel1.configure(activeforeground="black")
        self.ChooseUserLabel1.configure(background="#d9d9d9")
        self.ChooseUserLabel1.configure(disabledforeground="#a3a3a3")
        self.ChooseUserLabel1.configure(foreground="#000000")
        self.ChooseUserLabel1.configure(highlightbackground="#d9d9d9")
        self.ChooseUserLabel1.configure(highlightcolor="black")
        self.ChooseUserLabel1.configure(text='''Choose User:''')

#-------------------------------------------------------------------------------
        ##### action_with_args = partial(myfunc, self, self.UserInput, top) self.UserComboBox
        action_with_args = partial(BlinkyDataBaseManagment.user_info, MentorID)
        self.InfoBtn = tk.Button(self.MentorCntPnl,command=action_with_args)
        self.InfoBtn.place(relx=0.55, rely=0.788, height=42, width=108)
        self.InfoBtn.configure(activebackground="#ececec")
        self.InfoBtn.configure(activeforeground="#000000")
        self.InfoBtn.configure(background="#d9d9d9")
        self.InfoBtn.configure(disabledforeground="#a3a3a3")
        self.InfoBtn.configure(foreground="#000000")
        self.InfoBtn.configure(highlightbackground="#d9d9d9")
        self.InfoBtn.configure(highlightcolor="black")
        self.InfoBtn.configure(pady="0")
        self.InfoBtn.configure(text='''User Info''')
#--------------------------------------------------------------------
        action_with_args = partial(BlinkyDataBaseManagment.medical_info, MentorID)
        self.MedicalBtn = tk.Button(self.MentorCntPnl,command=action_with_args)
        self.MedicalBtn.place(relx=0.763, rely=0.788, height=42, width=118)
        self.MedicalBtn.configure(activebackground="#ececec")
        self.MedicalBtn.configure(activeforeground="#000000")
        self.MedicalBtn.configure(background="#d9d9d9")
        self.MedicalBtn.configure(disabledforeground="#a3a3a3")
        self.MedicalBtn.configure(foreground="#000000")
        self.MedicalBtn.configure(highlightbackground="#d9d9d9")
        self.MedicalBtn.configure(highlightcolor="black")
        self.MedicalBtn.configure(pady="0")
        self.MedicalBtn.configure(text='''Medical Info''')

        self.PswResetEntry = tk.Entry(self.MentorCntPnl)
        self.PswResetEntry.place(relx=0.225, rely=0.863, height=26, relwidth=0.28)
        self.PswResetEntry.configure(background="white")
        self.PswResetEntry.configure(disabledforeground="#a3a3a3")
        self.PswResetEntry.configure(font="TkFixedFont")
        self.PswResetEntry.configure(foreground="#000000")
        self.PswResetEntry.configure(highlightbackground="#d9d9d9")
        self.PswResetEntry.configure(highlightcolor="black")
        self.PswResetEntry.configure(insertbackground="black")
        self.PswResetEntry.configure(selectbackground="#c4c4c4")
        self.PswResetEntry.configure(selectforeground="black")

        self.PswResetLabel = tk.Label(self.MentorCntPnl)
        self.PswResetLabel.place(relx=0.063, rely=0.856, height=31, width=134)
        self.PswResetLabel.configure(activebackground="#f9f9f9")
        self.PswResetLabel.configure(activeforeground="black")
        self.PswResetLabel.configure(background="#d9d9d9")
        self.PswResetLabel.configure(disabledforeground="#a3a3a3")
        self.PswResetLabel.configure(foreground="#000000")
        self.PswResetLabel.configure(highlightbackground="#d9d9d9")
        self.PswResetLabel.configure(highlightcolor="black")
        self.PswResetLabel.configure(text='''Password Reset:''')

        action_with_args = partial(Forgot_password.Forgot_password_M, MentorID)

        self.PswResetButton = tk.Button(self.MentorCntPnl,command=action_with_args)
        self.PswResetButton.place(relx=0.563, rely=0.856, height=32, width=98)
        self.PswResetButton.configure(activebackground="#ececec")
        self.PswResetButton.configure(activeforeground="#000000")
        self.PswResetButton.configure(background="#d9d9d9")
        self.PswResetButton.configure(disabledforeground="#a3a3a3")
        self.PswResetButton.configure(foreground="#000000")
        self.PswResetButton.configure(highlightbackground="#d9d9d9")
        self.PswResetButton.configure(highlightcolor="black")
        self.PswResetButton.configure(pady="0")
        self.PswResetButton.configure(text='''Reset''')

        action_with_args = partial(LogicGui.LogicGui.LogoutfromMentor, self, top)

        self.LogOutMenBtn = tk.Button(self.MentorCntPnl,command=action_with_args)
        self.LogOutMenBtn.place(relx=0.85, rely=0.013, height=32, width=98)
        self.LogOutMenBtn.configure(activebackground="#ececec")
        self.LogOutMenBtn.configure(activeforeground="#000000")
        self.LogOutMenBtn.configure(background="#d9d9d9")
        self.LogOutMenBtn.configure(disabledforeground="#a3a3a3")
        self.LogOutMenBtn.configure(foreground="#000000")
        self.LogOutMenBtn.configure(highlightbackground="#d9d9d9")
        self.LogOutMenBtn.configure(highlightcolor="black")
        self.LogOutMenBtn.configure(pady="0")
        self.LogOutMenBtn.configure(text='''Log Out''')

        self.TechLabel = tk.Label(self.MentorCntPnl)
        self.TechLabel.place(relx=0.063, rely=0.925, height=26, width=62)
        self.TechLabel.configure(activebackground="#f9f9f9")
        self.TechLabel.configure(activeforeground="black")
        self.TechLabel.configure(background="#d9d9d9")
        self.TechLabel.configure(disabledforeground="#a3a3a3")
        self.TechLabel.configure(foreground="#000000")
        self.TechLabel.configure(highlightbackground="#d9d9d9")
        self.TechLabel.configure(highlightcolor="black")
        self.TechLabel.configure(text='''Support:''')



        action_with_args = partial(support.support_M)

        self.getSuppoertBtn = tk.Button(self.MentorCntPnl,command=action_with_args)
        self.getSuppoertBtn.place(relx=0.213, rely=0.925, height=32, width=118)
        self.getSuppoertBtn.configure(activebackground="#ececec")
        self.getSuppoertBtn.configure(activeforeground="#000000")
        self.getSuppoertBtn.configure(background="#d9d9d9")
        self.getSuppoertBtn.configure(disabledforeground="#a3a3a3")
        self.getSuppoertBtn.configure(foreground="#000000")
        self.getSuppoertBtn.configure(highlightbackground="#d9d9d9")
        self.getSuppoertBtn.configure(highlightcolor="black")
        self.getSuppoertBtn.configure(pady="0")
        self.getSuppoertBtn.configure(text='''Get Support''')



        self.SendMsgLabel2 = tk.Label(self.MentorCntPnl)
        self.SendMsgLabel2.place(relx=0.05, rely=0.525, height=61, width=147)
        self.SendMsgLabel2.configure(activebackground="#f9f9f9")
        self.SendMsgLabel2.configure(activeforeground="black")
        self.SendMsgLabel2.configure(background="#d9d9d9")
        self.SendMsgLabel2.configure(disabledforeground="#a3a3a3")
        self.SendMsgLabel2.configure(foreground="#000000")
        self.SendMsgLabel2.configure(highlightbackground="#d9d9d9")
        self.SendMsgLabel2.configure(highlightcolor="black")
        self.SendMsgLabel2.configure(text='''Send feedback:''')

        action_with_args = partial(BlinkyDataBaseManagment.MentorAddImagetoUser, MentorID, tempdirList, MentorList)

        self.addImgButton = tk.Button(self.MentorCntPnl, command=action_with_args)
        self.addImgButton.place(relx=0.725, rely=0.3, height=43, width=106)
        self.addImgButton.configure(activebackground="#ececec")
        self.addImgButton.configure(activeforeground="#000000")
        self.addImgButton.configure(background="#d9d9d9")
        self.addImgButton.configure(disabledforeground="#a3a3a3")
        self.addImgButton.configure(foreground="#000000")
        self.addImgButton.configure(highlightbackground="#d9d9d9")
        self.addImgButton.configure(highlightcolor="black")
        self.addImgButton.configure(pady="0")
        self.addImgButton.configure(text='''add image''')
        self.addImgButton.configure(width=106)

        action_with_args = partial(BlinkyDataBaseManagment.MentorRemoveImagetoUser, MentorID, MentorList)

        self.removeImgButton = tk.Button(self.MentorCntPnl,command=action_with_args)
        self.removeImgButton.place(relx=0.725, rely=0.213, height=43, width=116)
        self.removeImgButton.configure(activebackground="#ececec")
        self.removeImgButton.configure(activeforeground="#000000")
        self.removeImgButton.configure(background="#d9d9d9")
        self.removeImgButton.configure(disabledforeground="#a3a3a3")
        self.removeImgButton.configure(foreground="#000000")
        self.removeImgButton.configure(highlightbackground="#d9d9d9")
        self.removeImgButton.configure(highlightcolor="black")
        self.removeImgButton.configure(pady="0")
        self.removeImgButton.configure(text='''remove image''')
        self.removeImgButton.configure(width=116)

        action_with_args = partial(BlinkyDataBaseManagment.MentorAddPhrasetoUser,MentorID,MentorList)

        self.addPhraseButton = tk.Button(self.MentorCntPnl,command=action_with_args)
        self.addPhraseButton.place(relx=0.613, rely=0.425, height=43, width=106)
        self.addPhraseButton.configure(activebackground="#ececec")
        self.addPhraseButton.configure(activeforeground="#000000")
        self.addPhraseButton.configure(background="#d9d9d9")
        self.addPhraseButton.configure(disabledforeground="#a3a3a3")
        self.addPhraseButton.configure(foreground="#000000")
        self.addPhraseButton.configure(highlightbackground="#d9d9d9")
        self.addPhraseButton.configure(highlightcolor="black")
        self.addPhraseButton.configure(pady="0")
        self.addPhraseButton.configure(text='''add phrase''')
        self.addPhraseButton.configure(width=106)

        action_with_args = partial(BlinkyDataBaseManagment.MentorRemovePhrasetoUser, MentorID, MentorList)

        self.removePhraseButton = tk.Button(self.MentorCntPnl,command=action_with_args)
        self.removePhraseButton.place(relx=0.513, rely=0.213, height=43
                , width=126)
        self.removePhraseButton.configure(activebackground="#ececec")
        self.removePhraseButton.configure(activeforeground="#000000")
        self.removePhraseButton.configure(background="#d9d9d9")
        self.removePhraseButton.configure(disabledforeground="#a3a3a3")
        self.removePhraseButton.configure(foreground="#000000")
        self.removePhraseButton.configure(highlightbackground="#d9d9d9")
        self.removePhraseButton.configure(highlightcolor="black")
        self.removePhraseButton.configure(pady="0")
        self.removePhraseButton.configure(text='''remove phrase''')
        self.removePhraseButton.configure(width=126)

        self.SendFeedbackEntry = tk.Entry(self.MentorCntPnl)
        self.SendFeedbackEntry.place(relx=0.338, rely=0.525, height=64
                , relwidth=0.343)
        self.SendFeedbackEntry.configure(background="white")
        self.SendFeedbackEntry.configure(disabledforeground="#a3a3a3")
        self.SendFeedbackEntry.configure(font="TkFixedFont")
        self.SendFeedbackEntry.configure(foreground="#000000")
        self.SendFeedbackEntry.configure(insertbackground="black")
        self.SendFeedbackEntry.configure(width=274)


        ###############################################################################

        action_with_args = partial(sendMsgs.sendFeedbackToContacts,MentorID,MentorList)

        self.sendfeedbackbutton = tk.Button(self.MentorCntPnl,command=action_with_args)
        self.sendfeedbackbutton.place(relx=0.738, rely=0.525, height=43
                , width=116)
        self.sendfeedbackbutton.configure(activebackground="#ececec")
        self.sendfeedbackbutton.configure(activeforeground="#000000")
        self.sendfeedbackbutton.configure(background="#d9d9d9")
        self.sendfeedbackbutton.configure(disabledforeground="#a3a3a3")
        self.sendfeedbackbutton.configure(foreground="#000000")
        self.sendfeedbackbutton.configure(highlightbackground="#d9d9d9")
        self.sendfeedbackbutton.configure(highlightcolor="black")
        self.sendfeedbackbutton.configure(pady="0")
        self.sendfeedbackbutton.configure(text='''Send feedback''')
        self.sendfeedbackbutton.configure(width=116)

        self.RoleLabel = tk.Label(self.MentorCntPnl)
        self.RoleLabel.place(relx=0.025, rely=0.363, height=26, width=112)
        self.RoleLabel.configure(background="#d9d9d9")
        self.RoleLabel.configure(disabledforeground="#a3a3a3")
        self.RoleLabel.configure(foreground="#000000")
        self.RoleLabel.configure(text='''Choose index:''')
        self.RoleLabel.configure(width=112)

        self.box_value = tk.StringVar()
        self.rolecombobox = ttk.Combobox(self.MentorCntPnl, textvariable=self.box_value)
        self.rolecombobox.place(relx=0.188, rely=0.363, relheight=0.033
                , relwidth=0.246)
        self.rolecombobox.configure(textvariable=set_Tk_var)
        self.rolecombobox.configure(width=227)
        self.rolecombobox.configure(takefocus="")
        self.rolecombobox['values'] = ('1', '2', '3', '4')

        self.PathEntry = tk.Entry(self.MentorCntPnl)
        self.PathEntry.place(relx=0.175, rely=0.3,height=24, relwidth=0.268)
        self.PathEntry.configure(background="white")
        self.PathEntry.configure(disabledforeground="#a3a3a3")
        self.PathEntry.configure(font="TkFixedFont")
        self.PathEntry.configure(foreground="#000000")
        self.PathEntry.configure(insertbackground="black")
        self.PathEntry.configure(width=214)
        self.PathEntry.insert(0, tempdir)

        action_with_args = partial(browse, self.PathEntry)

        self.BrowseButton = tk.Button(self.MentorCntPnl,command=action_with_args)
        self.BrowseButton.place(relx=0.513, rely=0.3, height=43, width=109)
        self.BrowseButton.configure(activebackground="#ececec")
        self.BrowseButton.configure(activeforeground="#000000")
        self.BrowseButton.configure(background="#d9d9d9")
        self.BrowseButton.configure(disabledforeground="#a3a3a3")
        self.BrowseButton.configure(foreground="#000000")
        self.BrowseButton.configure(highlightbackground="#d9d9d9")
        self.BrowseButton.configure(highlightcolor="black")
        self.BrowseButton.configure(pady="0")
        self.BrowseButton.configure(text='''Browse...''')
        self.BrowseButton.configure(width=109)


        self.browseimageLabel = tk.Label(self.MentorCntPnl)
        self.browseimageLabel.place(relx=0.038, rely=0.3, height=26, width=104)
        self.browseimageLabel.configure(background="#d9d9d9")
        self.browseimageLabel.configure(disabledforeground="#a3a3a3")
        self.browseimageLabel.configure(foreground="#000000")
        self.browseimageLabel.configure(text='''Choose Image:''')

        self.newPhraseEntry = tk.Entry(self.MentorCntPnl)
        self.newPhraseEntry.place(relx=0.188, rely=0.425, height=44
                , relwidth=0.33)
        self.newPhraseEntry.configure(background="white")
        self.newPhraseEntry.configure(disabledforeground="#a3a3a3")
        self.newPhraseEntry.configure(font="TkFixedFont")
        self.newPhraseEntry.configure(foreground="#000000")
        self.newPhraseEntry.configure(insertbackground="black")
        self.newPhraseEntry.configure(width=264)

        self.newPhraseLabel = tk.Label(self.MentorCntPnl)
        self.newPhraseLabel.place(relx=0.038, rely=0.438, height=26, width=96)
        self.newPhraseLabel.configure(background="#d9d9d9")
        self.newPhraseLabel.configure(disabledforeground="#a3a3a3")
        self.newPhraseLabel.configure(foreground="#000000")
        self.newPhraseLabel.configure(text='''New Phrase:''')
        self.newPhraseLabel.configure(width=96)

        action_with_args = partial(BlinkyDataBaseManagment.MentorAddUser, MentorID, MentorList)

        self.AddNewUser = tk.Button(self.MentorCntPnl,command=action_with_args)
        self.AddNewUser.place(relx=0.788, rely=0.088, height=33, width=146)
        self.AddNewUser.configure(activebackground="#ececec")
        self.AddNewUser.configure(activeforeground="#000000")
        self.AddNewUser.configure(background="#d9d9d9")
        self.AddNewUser.configure(disabledforeground="#a3a3a3")
        self.AddNewUser.configure(foreground="#000000")
        self.AddNewUser.configure(highlightbackground="#d9d9d9")
        self.AddNewUser.configure(highlightcolor="black")
        self.AddNewUser.configure(pady="0")
        self.AddNewUser.configure(text='''Add New User''')
        self.AddNewUser.configure(width=146)


        self.NewUserID = tk.Entry(self.MentorCntPnl)
        self.NewUserID.place(relx=0.513, rely=0.094,height=24, relwidth=0.255)
        self.NewUserID.configure(background="white")
        self.NewUserID.configure(disabledforeground="#a3a3a3")
        self.NewUserID.configure(font="TkFixedFont")
        self.NewUserID.configure(foreground="#000000")
        self.NewUserID.configure(insertbackground="black")
        self.NewUserID.configure(width=204)

        action_with_args = partial(BlinkyDataBaseManagment.MentorRemoveUser, MentorID, MentorList)

        self.RemoveUserButton = tk.Button(self.MentorCntPnl, command=action_with_args)
        self.RemoveUserButton.place(relx=0.213, rely=0.138, height=33, width=126)

        self.RemoveUserButton.configure(activebackground="#ececec")
        self.RemoveUserButton.configure(activeforeground="#000000")
        self.RemoveUserButton.configure(background="#d9d9d9")
        self.RemoveUserButton.configure(disabledforeground="#a3a3a3")
        self.RemoveUserButton.configure(foreground="#000000")
        self.RemoveUserButton.configure(highlightbackground="#d9d9d9")
        self.RemoveUserButton.configure(highlightcolor="black")
        self.RemoveUserButton.configure(pady="0")
        self.RemoveUserButton.configure(text='''Remove User''')
        self.RemoveUserButton.configure(width=126)


        MentorList["UserComboBox"] = self.UserComboBox
        MentorList["ImageComboBox"] = self.ImageComboBox
        MentorList["titleCombobox"] = self.titleCombobox
        MentorList["rolecombobox"] = self.rolecombobox
        MentorList["newPhraseEntry"] = self.newPhraseEntry
        MentorList["NewUserID"] = self.NewUserID
        MentorList["EntryMessageUser"] = self.EntryMessageUser
        MentorList["SendFeedbackEntry"] = self.SendFeedbackEntry


